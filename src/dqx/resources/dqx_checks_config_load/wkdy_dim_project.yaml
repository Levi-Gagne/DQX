# =================================================================================================
# DQX Rules — de_prd.gold.wkdy_dim_project
# Run config: gold_wkdy_dim_project
# Notes:
# - Comments above each rule explain purpose.
# - A commented SQL block below each rule lets you spot offenders with plain Spark SQL.
# - Use `error` for correctness / integrity; use `warn` for hygiene and enrichments.
# =================================================================================================

# 1) Primary key must be unique (no duplicate surrogate keys)
# SQL test:
# SELECT project_key, COUNT(*) c
# FROM de_prd.gold.wkdy_dim_project
# GROUP BY project_key
# HAVING COUNT(*) > 1;
---
table_name: de_prd.gold.wkdy_dim_project
name: PK uniqueness on project_key
criticality: error
run_config_name: gold_wkdy_dim_project
check:
  function: is_unique
  arguments:
    columns: ["project_key"]

# 2) At most one ACTIVE SCD record per project_id
# SQL test:
# SELECT project_id, COUNT(*) active_rows
# FROM de_prd.gold.wkdy_dim_project
# WHERE is_active_record = true
# GROUP BY project_id
# HAVING COUNT(*) > 1;
---
table_name: de_prd.gold.wkdy_dim_project
name: One active SCD record per project_id
criticality: error
run_config_name: gold_wkdy_dim_project
check:
  function: sql_query
  arguments:
    input_placeholder: "{input}"
    merge_columns: ["project_id"]
    condition_column: "is_offender"
    query: |
      SELECT
        project_id,
        COUNT(*) > 1 AS is_offender
      FROM {input}
      WHERE is_active_record = true
      GROUP BY project_id

# 3) SCD end_date must align with is_active_record (end_date NULL ↔ active; NOT NULL ↔ inactive)
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE (is_active_record = true  AND end_date IS NOT NULL)
#    OR (is_active_record = false AND end_date IS NULL);
---
table_name: de_prd.gold.wkdy_dim_project
name: SCD end_date aligns with is_active_record
criticality: error
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      (is_active_record = true  AND end_date IS NOT NULL)
      OR
      (is_active_record = false AND end_date IS NULL)

# 4) SCD date order valid (start_date <= end_date when both present)
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE end_date IS NOT NULL AND start_date IS NOT NULL AND end_date < start_date;
---
table_name: de_prd.gold.wkdy_dim_project
name: SCD date order valid
criticality: error
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      end_date IS NOT NULL AND start_date IS NOT NULL AND end_date < start_date

# 5) Project date order valid (project_end_date >= project_start_date when both present)
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE project_end_date IS NOT NULL AND project_start_date IS NOT NULL
#   AND project_end_date < project_start_date;
---
table_name: de_prd.gold.wkdy_dim_project
name: Project date order valid
criticality: error
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      project_end_date IS NOT NULL AND project_start_date IS NOT NULL
      AND project_end_date < project_start_date

# 6) Activity window sanity: last_activity_date >= first_activity_date when both present
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE last_activity_date IS NOT NULL AND first_activity_date IS NOT NULL
#   AND last_activity_date < first_activity_date;
---
table_name: de_prd.gold.wkdy_dim_project
name: Activity date order valid
criticality: error
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      last_activity_date IS NOT NULL AND first_activity_date IS NOT NULL
      AND last_activity_date < first_activity_date

# 7) Activity should not exceed project_end_date (when end present)
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE project_end_date IS NOT NULL AND last_activity_date IS NOT NULL
#   AND last_activity_date > project_end_date;
---
table_name: de_prd.gold.wkdy_dim_project
name: Activity not after project_end_date
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      project_end_date IS NOT NULL AND last_activity_date IS NOT NULL
      AND last_activity_date > project_end_date

# 8) Status semantics: 'Closed' implies project_end_date is NOT NULL
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE upper(project_status) = 'CLOSED' AND project_end_date IS NULL;
---
table_name: de_prd.gold.wkdy_dim_project
name: Closed requires project_end_date
criticality: error
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      upper(project_status) = 'CLOSED' AND project_end_date IS NULL

# 9) Status semantics: 'Schedule Pending' should have no activity yet
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE upper(project_status) = 'SCHEDULE PENDING'
#   AND (first_activity_date IS NOT NULL OR last_activity_date IS NOT NULL);
---
table_name: de_prd.gold.wkdy_dim_project
name: Schedule Pending has no activity
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      upper(project_status) = 'SCHEDULE PENDING'
      AND (first_activity_date IS NOT NULL OR last_activity_date IS NOT NULL)

# 10) Active projects must be tied to a customer (ID & name present)
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE upper(project_status) = 'ACTIVE'
#   AND (customer_id IS NULL OR length(trim(customer_id)) = 0
#        OR customer_name IS NULL OR length(trim(customer_name)) = 0);
---
table_name: de_prd.gold.wkdy_dim_project
name: Active project has customer
criticality: error
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      upper(project_status) = 'ACTIVE'
      AND (customer_id IS NULL OR length(trim(customer_id)) = 0
           OR customer_name IS NULL OR length(trim(customer_name)) = 0)

# 11) Customer status vs project status (inactive customer shouldn’t have active/sched projects)
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE upper(customer_status) = 'INACTIVE'
#   AND upper(project_status) IN ('ACTIVE','SCHEDULE PENDING');
---
table_name: de_prd.gold.wkdy_dim_project
name: Inactive customer with active/scheduled project
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      upper(customer_status) = 'INACTIVE'
      AND upper(project_status) IN ('ACTIVE','SCHEDULE PENDING')

# 12) Emails look like emails (leader & biller)
# SQL test:
# SELECT project_leader_email FROM de_prd.gold.wkdy_dim_project
# WHERE project_leader_email IS NOT NULL AND length(trim(project_leader_email))>0
#   AND NOT regexp_like(project_leader_email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$');
---
table_name: de_prd.gold.wkdy_dim_project
name: Email format (leader)
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: regex_match
  arguments:
    column: project_leader_email
    regex: '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'

# SQL test:
# SELECT project_biller_email FROM de_prd.gold.wkdy_dim_project
# WHERE project_biller_email IS NOT NULL AND length(trim(project_biller_email))>0
#   AND NOT regexp_like(project_biller_email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$');
---
table_name: de_prd.gold.wkdy_dim_project
name: Email format (biller)
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: regex_match
  arguments:
    column: project_biller_email
    regex: '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'

# 13) Employee IDs (leader/biller) are 6 digits when present
# SQL test:
# SELECT project_leader_employee_id
# FROM de_prd.gold.wkdy_dim_project
# WHERE project_leader_employee_id IS NOT NULL
#   AND NOT regexp_like(project_leader_employee_id, '^[0-9]{6}$');
---
table_name: de_prd.gold.wkdy_dim_project
name: Leader employee_id format (6 digits)
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: regex_match
  arguments:
    column: project_leader_employee_id
    regex: '^[0-9]{6}$'

# SQL test:
# SELECT project_biller_employee_id
# FROM de_prd.gold.wkdy_dim_project
# WHERE project_biller_employee_id IS NOT NULL
#   AND NOT regexp_like(project_biller_employee_id, '^[0-9]{6}$');
---
table_name: de_prd.gold.wkdy_dim_project
name: Biller employee_id format (6 digits)
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: regex_match
  arguments:
    column: project_biller_employee_id
    regex: '^[0-9]{6}$'

# 14) Cost center code is 3 digits when present
# SQL test:
# SELECT project_cost_center_code
# FROM de_prd.gold.wkdy_dim_project
# WHERE project_cost_center_code IS NOT NULL
#   AND NOT regexp_like(project_cost_center_code, '^[0-9]{3}$');
---
table_name: de_prd.gold.wkdy_dim_project
name: Cost center code format (3 digits)
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: regex_match
  arguments:
    column: project_cost_center_code
    regex: '^[0-9]{3}$'

# 15) SIC code is 4 digits when present (and name required if code present)
# SQL test:
# SELECT project_sic_code
# FROM de_prd.gold.wkdy_dim_project
# WHERE project_sic_code IS NOT NULL
#   AND NOT regexp_like(project_sic_code, '^[0-9]{4}$');
---
table_name: de_prd.gold.wkdy_dim_project
name: SIC code format (4 digits)
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: regex_match
  arguments:
    column: project_sic_code
    regex: '^[0-9]{4}$'

# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE project_sic_code IS NOT NULL
#   AND (project_sic_code_name IS NULL OR length(trim(project_sic_code_name))=0);
---
table_name: de_prd.gold.wkdy_dim_project
name: SIC name required when code present
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      project_sic_code IS NOT NULL
      AND (project_sic_code_name IS NULL OR length(trim(project_sic_code_name))=0)

# 16) Project ID format — allow PRJ-######## or A######-TX##-YYYY (common patterns)
# SQL test:
# SELECT project_id
# FROM de_prd.gold.wkdy_dim_project
# WHERE project_id IS NOT NULL AND length(trim(project_id))>0
#   AND NOT regexp_like(project_id, '^(PRJ-[0-9]{5,}|[A-Z][0-9]{5,}-[A-Z0-9]{2,}-[0-9]{4})$');
---
table_name: de_prd.gold.wkdy_dim_project
name: Project ID format (common patterns)
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: regex_match
  arguments:
    column: project_id
    regex: '^(PRJ-[0-9]{5,}|[A-Z][0-9]{5,}-[A-Z0-9]{2,}-[0-9]{4})$'

# 17) No literal 'Unknown' placeholders in person fields
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE lower(coalesce(project_key_contributor_name,'')) LIKE 'unknown%'
#    OR lower(coalesce(project_key_contributor_email,'')) LIKE 'unknown%';
---
table_name: de_prd.gold.wkdy_dim_project
name: Disallow 'Unknown' placeholders (key contributor)
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      lower(coalesce(project_key_contributor_name,'')) LIKE 'unknown%'
      OR lower(coalesce(project_key_contributor_email,'')) LIKE 'unknown%'

# 18) Active projects should have leader & biller assigned (IDs + emails)
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE upper(project_status) = 'ACTIVE'
#   AND (project_leader_employee_id IS NULL OR project_biller_employee_id IS NULL
#        OR length(trim(coalesce(project_leader_email,''))) = 0
#        OR length(trim(coalesce(project_biller_email,''))) = 0);
---
table_name: de_prd.gold.wkdy_dim_project
name: Active project has leader & biller assigned
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      upper(project_status) = 'ACTIVE'
      AND (project_leader_employee_id IS NULL OR project_biller_employee_id IS NULL
           OR length(trim(coalesce(project_leader_email,''))) = 0
           OR length(trim(coalesce(project_biller_email,''))) = 0)

# 19) Service line/type presence for active projects
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE upper(project_status) = 'ACTIVE'
#   AND (project_type_name IS NULL OR project_service_line_level_2 IS NULL);
---
table_name: de_prd.gold.wkdy_dim_project
name: Active project has type and service line
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      upper(project_status) = 'ACTIVE'
      AND (project_type_name IS NULL OR project_service_line_level_2 IS NULL)

# 20) Period end date not before project_start_date (when both present)
# SQL test:
# SELECT *
# FROM de_prd.gold.wkdy_dim_project
# WHERE period_end_date IS NOT NULL AND project_start_date IS NOT NULL
#   AND period_end_date < project_start_date;
---
table_name: de_prd.gold.wkdy_dim_project
name: Period end after project start
criticality: warn
run_config_name: gold_wkdy_dim_project
check:
  function: sql_expression
  arguments:
    expression: |
      period_end_date IS NOT NULL AND project_start_date IS NOT NULL
      AND period_end_date < project_start_date